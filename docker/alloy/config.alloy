// Grafana Alloy configuration for TradeMachine Ex
// This configuration collects logs and metrics from the containerized application

// Prometheus metrics scraping from the application
prometheus.scrape "trade_machine_ex" {
  targets = [{
    __address__ = "app:9090",
    service     = "trade_machine_ex",
    environment = "production",
  }]

  forward_to = [prometheus.remote_write.default.receiver]

  scrape_interval = "15s"
  metrics_path    = "/metrics"
}

// Prometheus remote write configuration (configure endpoints as needed)
prometheus.remote_write "default" {
  endpoint {
    url = env("PROMETHEUS_REMOTE_WRITE_URL")

    basic_auth {
      username = env("PROMETHEUS_REMOTE_WRITE_USERNAME")
      password = env("PROMETHEUS_REMOTE_WRITE_PASSWORD")
    }
  }
}

// Log collection from Docker container logs
loki.source.docker "trade_machine_ex" {
  host             = "unix:///var/run/docker.sock"
  targets          = discovery.docker.containers.targets
  forward_to       = [loki.process.trade_machine_ex.receiver]
  relabel_rules    = discovery.docker.containers.relabel_rules
  refresh_interval = "5s"
}

// Docker service discovery
discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"

  filter {
    name   = "label"
    values = ["service=trade_machine_ex"]
  }
}

// Log processing and parsing
loki.process "trade_machine_ex" {
  forward_to = [loki.write.default.receiver]

  stage.json {
    expressions = {
      level       = "level",
      message     = "message",
      timestamp   = "@timestamp",
      service     = "service",
      environment = "environment",
      request_id  = "request_id",
    }
  }

  stage.labels {
    values = {
      level       = "",
      service     = "",
      environment = "",
    }
  }

  stage.timestamp {
    source = "timestamp"
    format = "RFC3339"
  }
}

// Loki remote write configuration
loki.write "default" {
  endpoint {
    url = env("LOKI_URL")

    basic_auth {
      username = env("LOKI_USERNAME")
      password = env("LOKI_PASSWORD")
    }
  }
}

// File-based log collection (fallback for non-JSON logs)
loki.source.file "trade_machine_ex_files" {
  targets = [{
    __path__ = "/var/log/trade_machine_ex/*.log",
    service  = "trade_machine_ex",
    job      = "trade_machine_ex_files",
  }]

  forward_to = [loki.process.trade_machine_ex_files.receiver]
}

loki.process "trade_machine_ex_files" {
  forward_to = [loki.write.default.receiver]

  stage.regex {
    expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z) \\[(?P<level>\\w+)\\] (?P<message>.*)"
  }

  stage.labels {
    values = {
      level   = "",
      service = "trade_machine_ex",
      job     = "file_logs",
    }
  }

  stage.timestamp {
    source = "timestamp"
    format = "RFC3339"
  }
}