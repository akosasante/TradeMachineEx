import Config

# Development configuration - uses environment variables with sensible defaults
# For containerized development, these are set in docker-compose.yml
# For direct machine development, set these in your shell environment
config :trade_machine,
  spreadsheet_id:
    System.get_env("GOOGLE_SPREADSHEET_ID", "16SjDZBO2vY6rGj9CM7nW2pG21i4pZ85LGlbMCODVQtk")

# Database configuration with environment variable support
query_args = ["SET search_path TO #{System.get_env("DATABASE_SCHEMA", "public")}", []]

config :trade_machine, TradeMachine.Repo,
  username: System.get_env("DATABASE_USER", "trader_dev"),
  password: System.get_env("DATABASE_PASSWORD", "blawrie13"),
  database: System.get_env("DATABASE_NAME", "trade_machine"),
  hostname: System.get_env("DATABASE_HOST", "159.89.122.97"),
  port: String.to_integer(System.get_env("DATABASE_PORT", "5432")),
  show_sensitive_data_on_connection_error: true,
  pool_size: String.to_integer(System.get_env("DATABASE_POOL_SIZE", "10")),
  after_connect: {Postgrex, :query!, query_args}

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :trade_machine, TradeMachineWeb.Endpoint,
  http: [port: String.to_integer(System.get_env("PORT", "4000"))],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    # Start the esbuild watcher by calling Esbuild.install_and_run(:default, args)
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Live reload disabled for Docker development
# File watching in containers can cause issues and isn't necessary
# when code is mounted as a volume
# config :trade_machine, TradeMachineWeb.Endpoint,
#   live_reload: [
#     patterns: [
#       ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
#       ~r"priv/gettext/.*(po)$",
#       ~r"lib/trade_machine_web/(live|views)/.*(ex)$",
#       ~r"lib/trade_machine_web/templates/.*(eex)$"
#     ]
#   ]

# Do not include metadata nor timestamps in development logs
# config :logger, :console, format: "[$level] $message\n"

config :logger,
  backends: [:console],
  level: :debug

config :logger, :console,
  format: {LogFormatter, :format},
  metadata: [:request_id, :user_id, :mfa, :file, :line]

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Configure Oban for job processing
config :trade_machine, Oban,
  prefix: System.get_env("SCHEMA", "dev"),
  plugins: [
    {Oban.Plugins.Pruner, max_age: 300},
    {Oban.Plugins.Cron,
     crontab: [
       {"*/2 * * * *", TradeMachine.Jobs.MinorsSync,
        args: %{sheet_id: "16SjDZBO2vY6rGj9CM7nW2pG21i4pZ85LGlbMCODVQtk"}}
     ]}
  ]
