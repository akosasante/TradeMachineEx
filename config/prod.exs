use Mix.Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :trade_machine, TradeMachineWeb.Endpoint,
       #  url: [host: "localhost", port: 4000],
       cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
config :logger,
       backends: [{LoggerFileBackend, :debug_log}],
       utc_log: true,
       handle_otp_reports: true

config :logger, :debug_log,
       path: "/var/log/trade_machine_ex/debug.log",
       level: :debug,
       metadata: :all,
       format: {Formatter.Log, :format}

config :trade_machine,
       sheets_creds_filepath: "./sheets_creds.json"

# Configuring postgres schema to use for all queries
query_args = ["SET search_path TO #{System.get_env("SCHEMA", "staging")}", []]

# Configure your database
config :trade_machine,
       TradeMachine.Repo,
       username: "trader_dev",
       password: System.get_env("DB_PASSWORD"),
       database: "trade_machine",
       hostname: "localhost",
       port: 5432,
       show_sensitive_data_on_connection_error: false,
       pool_size: 10,
       after_connect: {Postgrex, :query!, query_args}

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :trade_machine, TradeMachineWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH"),
#         transport_options: [socket_opts: [:inet6]]
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :trade_machine, TradeMachineWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Configure Oban for job processing

cron_plugin = if System.get_env("SCHEMA") == "staging", do: {Oban.Plugins.Cron, crontab: [{"0 2 * * *", TradeMachine.Jobs.MinorsSync}]}, else: false
config :trade_machine, Oban,
       plugins: [cron_plugin],
       prefix: System.get_env("SCHEMA", "staging")

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.
import_config "prod.secret.exs"
