name: Docker Build and Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/trade-machine-ex

jobs:
  # Security scanning and linting
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ github.ref_name }}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  # Deploy to production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          port: ${{ secrets.DIGITALOCEAN_SSH_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /opt/Apps/TradeMachineEx

            # Always download the latest docker-compose.prod.yml from repository
            echo "Downloading latest docker-compose.prod.yml from repository..."
            curl -o docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml

            # Authenticate with GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            docker pull ${{ needs.build-and-push.outputs.image }}

            # Tag the image with a local tag for docker-compose
            LOCAL_TAG="ghcr.io/akosasante/trade-machine-ex:deploy-$(date +%s)"
            docker tag ${{ needs.build-and-push.outputs.image }} $LOCAL_TAG
            echo "Tagged image as: $LOCAL_TAG"

            # Stop and remove old container
            docker compose -f docker-compose.prod.yml down

            # Start with new image using the local tag
            echo "Starting docker-compose with IMAGE_TAG=$LOCAL_TAG"
            IMAGE_TAG="$LOCAL_TAG" docker compose -f docker-compose.prod.yml up -d --pull never --build

            # Clean up old images (keep last 3)
            docker image prune -f
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.Repository}}:{{.Tag}}" | tail -n +4 | xargs -r docker rmi

            # Verify deployment
            sleep 10
            if ! curl -f http://localhost:4001/health; then
              echo "Health check failed, rolling back..."
              docker compose -f docker-compose.prod.yml logs app
              exit 1
            fi

            echo "Deployment successful!"

  # Post-deployment verification
  verify:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Health Check
        run: |
          # Wait a bit for the service to fully start
          sleep 30

          # Verify the health endpoint is responding
          curl -f http://${{ secrets.DIGITALOCEAN_HOST }}:4001/health || exit 1

          # Verify metrics endpoint is available
          curl -f http://${{ secrets.DIGITALOCEAN_HOST }}:9090/metrics || exit 1

          echo "All health checks passed!"
